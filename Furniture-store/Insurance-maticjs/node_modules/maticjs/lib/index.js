"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

require("isomorphic-fetch");

var _web = _interopRequireDefault(require("web3"));

var _ethereumjsUtil = _interopRequireDefault(require("ethereumjs-util"));

var _queryString = _interopRequireDefault(require("query-string"));

var _proofs = require("./helpers/proofs");

var _blocks = require("./helpers/blocks");

var _merkleTree = _interopRequireDefault(require("./helpers/merkle-tree"));

var _RootChain = _interopRequireDefault(require("../artifacts/RootChain"));

var _ChildERC = _interopRequireDefault(require("../artifacts/ChildERC20"));

var _ChildERC2 = _interopRequireDefault(require("../artifacts/ChildERC721"));

var _StandardToken = _interopRequireDefault(require("../artifacts/StandardToken"));

var _WithdrawManager = _interopRequireDefault(require("../artifacts/WithdrawManager"));

var _DepositManager = _interopRequireDefault(require("../artifacts/DepositManager"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var rlp = _ethereumjsUtil.default.rlp;

var Matic =
/*#__PURE__*/
function () {
  function Matic() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    (0, _classCallCheck2.default)(this, Matic);

    this._throwIfNull(options.maticProvider, 'maticProvider is required');

    this._throwIfNull(options.parentProvider, 'parentProvider is required');

    this._web3 = new _web.default(options.maticProvider);
    this._web3.matic = true;
    this._parentWeb3 = new _web.default(options.parentProvider);
    this._syncerUrl = options.syncerUrl;
    this._watcherUrl = options.watcherUrl;
    this._rootChainAddress = options.rootChainAddress;
    this._maticWethAddress = options.maticWethAddress;
    this._withdrawManagerAddress = options.withdrawManagerAddress;
    this._depositManagerAddress = options.depositManagerAddress; // create rootchain contract

    this._rootChainContract = new this._parentWeb3.eth.Contract(_RootChain.default.abi, this._rootChainAddress); // create withdraw manager contract

    this._withdrawManagerContract = new this._parentWeb3.eth.Contract(_WithdrawManager.default.abi, this._withdrawManagerAddress); // create deposit manager contract

    this._depositManagerContract = new this._parentWeb3.eth.Contract(_DepositManager.default.abi, this._depositManagerAddress); // internal cache

    this._tokenCache = {};
    this._tokenMappedCache = {};
  } //
  // Getters & setters
  //


  (0, _createClass2.default)(Matic, [{
    key: "setWallet",
    value: function setWallet(_wallet) {
      this._web3.eth.accounts.wallet.add(_wallet);

      this._parentWeb3.eth.accounts.wallet.add(_wallet);
    } //
    // Actions
    //

  }, {
    key: "newAccount",
    value: function newAccount() {
      return this._parentWeb3.eth.accounts.wallet.create(1);
    }
  }, {
    key: "getMappedTokenAddress",
    value: function () {
      var _getMappedTokenAddress = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee(address) {
        var _a;

        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _a = address.toLowerCase();

                if (this._tokenMappedCache[_a]) {
                  _context.next = 5;
                  break;
                }

                _context.next = 4;
                return this._depositManagerContract.methods.tokens(_a).call();

              case 4:
                this._tokenMappedCache[_a] = _context.sent;

              case 5:
                return _context.abrupt("return", this._tokenMappedCache[_a]);

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getMappedTokenAddress(_x) {
        return _getMappedTokenAddress.apply(this, arguments);
      }

      return getMappedTokenAddress;
    }()
  }, {
    key: "balanceOfERC721",
    value: function () {
      var _balanceOfERC = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee2(address, token) {
        var options,
            web3Object,
            balance,
            _args2 = arguments;
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                options = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {};
                web3Object = this._web3;

                if (options.parent) {
                  web3Object = this._parentWeb3;
                }

                _context2.next = 5;
                return this._getERC721TokenContract(token, web3Object).methods.balanceOf(address).call();

              case 5:
                balance = _context2.sent;
                return _context2.abrupt("return", balance);

              case 7:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function balanceOfERC721(_x2, _x3) {
        return _balanceOfERC.apply(this, arguments);
      }

      return balanceOfERC721;
    }()
  }, {
    key: "balanceOfERC20",
    value: function () {
      var _balanceOfERC2 = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee3(address, token) {
        var options,
            web3Object,
            balance,
            _args3 = arguments;
        return _regenerator.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                options = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : {};
                web3Object = this._web3;

                if (options.parent) {
                  web3Object = this._parentWeb3;
                }

                _context3.next = 5;
                return this._getERC20TokenContract(token, web3Object).methods.balanceOf(address).call();

              case 5:
                balance = _context3.sent;
                return _context3.abrupt("return", balance);

              case 7:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function balanceOfERC20(_x4, _x5) {
        return _balanceOfERC2.apply(this, arguments);
      }

      return balanceOfERC20;
    }()
  }, {
    key: "tokenOfOwnerByIndexERC721",
    value: function () {
      var _tokenOfOwnerByIndexERC = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee4(address, token, index) {
        var options,
            web3Object,
            tokenID,
            _args4 = arguments;
        return _regenerator.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                options = _args4.length > 3 && _args4[3] !== undefined ? _args4[3] : {};
                web3Object = this._web3;

                if (options.parent) {
                  web3Object = this._parentWeb3;
                }

                _context4.next = 5;
                return this._getERC721TokenContract(token, web3Object).methods.tokenOfOwnerByIndex(address, index).call();

              case 5:
                tokenID = _context4.sent;
                return _context4.abrupt("return", tokenID);

              case 7:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function tokenOfOwnerByIndexERC721(_x6, _x7, _x8) {
        return _tokenOfOwnerByIndexERC.apply(this, arguments);
      }

      return tokenOfOwnerByIndexERC721;
    }()
  }, {
    key: "depositEthers",
    value: function () {
      var _depositEthers = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee5() {
        var options,
            depositTx,
            _options,
            _args5 = arguments;

        return _regenerator.default.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                options = _args5.length > 0 && _args5[0] !== undefined ? _args5[0] : {};

                if (!(options && (!options.from || !options.value))) {
                  _context5.next = 3;
                  break;
                }

                throw new Error('Missing Parameters');

              case 3:
                depositTx = this._rootChainContract.methods.depositEthers();
                _context5.next = 6;
                return this._fillOptions(options, depositTx, this._parentWeb3);

              case 6:
                _options = _context5.sent;
                return _context5.abrupt("return", this._wrapWeb3Promise(depositTx.send(_options), options));

              case 8:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function depositEthers() {
        return _depositEthers.apply(this, arguments);
      }

      return depositEthers;
    }()
  }, {
    key: "approveERC20TokensForDeposit",
    value: function () {
      var _approveERC20TokensForDeposit = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee6(token, amount) {
        var options,
            _tokenContract,
            approveTx,
            _options,
            _args6 = arguments;

        return _regenerator.default.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                options = _args6.length > 2 && _args6[2] !== undefined ? _args6[2] : {};

                if (!(options && (!options.from || !amount || !token))) {
                  _context6.next = 3;
                  break;
                }

                throw new Error('Missing Parameters');

              case 3:
                _tokenContract = new this._parentWeb3.eth.Contract(_StandardToken.default.abi, token);
                _context6.next = 6;
                return _tokenContract.methods.approve(this._rootChainAddress, amount);

              case 6:
                approveTx = _context6.sent;
                _context6.next = 9;
                return this._fillOptions(options, approveTx, this._parentWeb3);

              case 9:
                _options = _context6.sent;
                return _context6.abrupt("return", this._wrapWeb3Promise(approveTx.send(_options), options));

              case 11:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function approveERC20TokensForDeposit(_x9, _x10) {
        return _approveERC20TokensForDeposit.apply(this, arguments);
      }

      return approveERC20TokensForDeposit;
    }()
  }, {
    key: "depositERC20Tokens",
    value: function () {
      var _depositERC20Tokens = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee7(token, user, amount) {
        var options,
            depositTx,
            _options,
            _args7 = arguments;

        return _regenerator.default.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                options = _args7.length > 3 && _args7[3] !== undefined ? _args7[3] : {};

                if (!(options && (!options.from || !token || !user || !amount))) {
                  _context7.next = 3;
                  break;
                }

                throw new Error('Missing Parameters');

              case 3:
                depositTx = this._rootChainContract.methods.deposit(token, user, amount);
                _context7.next = 6;
                return this._fillOptions(options, depositTx, this._parentWeb3);

              case 6:
                _options = _context7.sent;
                return _context7.abrupt("return", this._wrapWeb3Promise(depositTx.send(_options), options));

              case 8:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function depositERC20Tokens(_x11, _x12, _x13) {
        return _depositERC20Tokens.apply(this, arguments);
      }

      return depositERC20Tokens;
    }()
  }, {
    key: "safeDepositERC721Tokens",
    value: function () {
      var _safeDepositERC721Tokens = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee8(token, tokenId) {
        var options,
            _tokenContract,
            safeDepositERC721Tokens,
            _options,
            _args8 = arguments;

        return _regenerator.default.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                options = _args8.length > 2 && _args8[2] !== undefined ? _args8[2] : {};

                if (!(options && (!options.from || !tokenId || !token))) {
                  _context8.next = 3;
                  break;
                }

                throw new Error('Missing Parameters');

              case 3:
                _tokenContract = this._getERC721TokenContract(token, this._parentWeb3);
                _context8.next = 6;
                return _tokenContract.methods.safeTransferFrom(options.from, this._rootChainAddress, tokenId);

              case 6:
                safeDepositERC721Tokens = _context8.sent;
                _context8.next = 9;
                return this._fillOptions(options, safeDepositERC721Tokens, this._parentWeb3);

              case 9:
                _options = _context8.sent;
                return _context8.abrupt("return", this._wrapWeb3Promise(safeDepositERC721Tokens.send(_options), options));

              case 11:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function safeDepositERC721Tokens(_x14, _x15) {
        return _safeDepositERC721Tokens.apply(this, arguments);
      }

      return safeDepositERC721Tokens;
    }()
  }, {
    key: "approveERC721TokenForDeposit",
    value: function () {
      var _approveERC721TokenForDeposit = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee9(token, tokenId) {
        var options,
            _tokenContract,
            approveTx,
            _options,
            _args9 = arguments;

        return _regenerator.default.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                options = _args9.length > 2 && _args9[2] !== undefined ? _args9[2] : {};

                if (!(options && (!options.from || !tokenId || !token))) {
                  _context9.next = 3;
                  break;
                }

                throw new Error('Missing Parameters');

              case 3:
                _tokenContract = this._getERC721TokenContract(token, this._parentWeb3);
                _context9.next = 6;
                return _tokenContract.methods.approve(this._rootChainAddress, tokenId);

              case 6:
                approveTx = _context9.sent;
                _context9.next = 9;
                return this._fillOptions(options, approveTx, this._parentWeb3);

              case 9:
                _options = _context9.sent;
                return _context9.abrupt("return", this._wrapWeb3Promise(approveTx.send(_options), options));

              case 11:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function approveERC721TokenForDeposit(_x16, _x17) {
        return _approveERC721TokenForDeposit.apply(this, arguments);
      }

      return approveERC721TokenForDeposit;
    }()
  }, {
    key: "depositERC721Tokens",
    value: function () {
      var _depositERC721Tokens = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee10(token, user, tokenId) {
        var options,
            depositTx,
            _options,
            _args10 = arguments;

        return _regenerator.default.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                options = _args10.length > 3 && _args10[3] !== undefined ? _args10[3] : {};

                if (!(options && (!options.from || !token || !user || !tokenId))) {
                  _context10.next = 3;
                  break;
                }

                throw new Error('Missing Parameters');

              case 3:
                depositTx = this._rootChainContract.methods.depositERC721(token, user, tokenId);
                _context10.next = 6;
                return this._fillOptions(options, depositTx, this._parentWeb3);

              case 6:
                _options = _context10.sent;
                return _context10.abrupt("return", this._wrapWeb3Promise(depositTx.send(_options), options));

              case 8:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      function depositERC721Tokens(_x18, _x19, _x20) {
        return _depositERC721Tokens.apply(this, arguments);
      }

      return depositERC721Tokens;
    }()
  }, {
    key: "transferTokens",
    value: function () {
      var _transferTokens = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee11(token, user, amount) {
        var options,
            web3Object,
            _tokenContract,
            transferTx,
            _options,
            _args11 = arguments;

        return _regenerator.default.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                options = _args11.length > 3 && _args11[3] !== undefined ? _args11[3] : {};

                if (!(options && (!options.from || !amount || !user || !token))) {
                  _context11.next = 3;
                  break;
                }

                throw new Error('Missing Parameters');

              case 3:
                web3Object = this._web3;

                if (options.parent) {
                  web3Object = this._parentWeb3;
                }

                _tokenContract = this._getERC20TokenContract(token, web3Object);
                transferTx = _tokenContract.methods.transfer(user, amount);
                _context11.next = 9;
                return this._fillOptions(options, transferTx, web3Object);

              case 9:
                _options = _context11.sent;
                return _context11.abrupt("return", this._wrapWeb3Promise(transferTx.send(_options), options));

              case 11:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      function transferTokens(_x21, _x22, _x23) {
        return _transferTokens.apply(this, arguments);
      }

      return transferTokens;
    }()
  }, {
    key: "transferERC721Tokens",
    value: function () {
      var _transferERC721Tokens = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee12(token, user, tokenId) {
        var options,
            web3Object,
            _tokenContract,
            transferTx,
            _options,
            _args12 = arguments;

        return _regenerator.default.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                options = _args12.length > 3 && _args12[3] !== undefined ? _args12[3] : {};
                web3Object = this._web3;

                if (options.parent) {
                  web3Object = this._parentWeb3;
                }

                _tokenContract = this._getERC721TokenContract(token, web3Object);
                transferTx = _tokenContract.methods.transferFrom(options.from, user, tokenId);
                _context12.next = 7;
                return this._fillOptions(options, transferTx, web3Object);

              case 7:
                _options = _context12.sent;
                return _context12.abrupt("return", this._wrapWeb3Promise(transferTx.send(_options), options));

              case 9:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      function transferERC721Tokens(_x24, _x25, _x26) {
        return _transferERC721Tokens.apply(this, arguments);
      }

      return transferERC721Tokens;
    }()
  }, {
    key: "transferEthers",
    value: function () {
      var _transferEthers = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee13(to, amount) {
        var options,
            web3Object,
            from,
            gasLimit,
            _options,
            _args13 = arguments;

        return _regenerator.default.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                options = _args13.length > 2 && _args13[2] !== undefined ? _args13[2] : {};
                web3Object = this._parentWeb3;

                if (!(options && (!options.from || !amount || !to))) {
                  _context13.next = 4;
                  break;
                }

                throw new Error('Missing Parameters');

              case 4:
                from = options.from; // if matic chain, transfer normal WETH tokens

                if (!(!options.parent && !options.isCustomEth)) {
                  _context13.next = 7;
                  break;
                }

                return _context13.abrupt("return", this.transferTokens(this._maticWethAddress, to, amount, options));

              case 7:
                if (!options.parent && options.isCustomEth) {
                  web3Object = this._web3;
                }

                _context13.next = 10;
                return web3Object.eth.estimateGas({
                  from: from,
                  value: amount
                });

              case 10:
                gasLimit = _context13.sent;
                options.gasLimit = gasLimit;
                options.value = amount;
                options.to = to;
                _context13.next = 16;
                return this._fillOptions(options, {}, web3Object);

              case 16:
                _options = _context13.sent;
                return _context13.abrupt("return", this._wrapWeb3Promise(web3Object.eth.sendTransaction(_options), options));

              case 18:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      function transferEthers(_x27, _x28) {
        return _transferEthers.apply(this, arguments);
      }

      return transferEthers;
    }()
  }, {
    key: "startWithdraw",
    value: function () {
      var _startWithdraw = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee14(token, amount) {
        var options,
            _tokenContract,
            withdrawTx,
            _options,
            _args14 = arguments;

        return _regenerator.default.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                options = _args14.length > 2 && _args14[2] !== undefined ? _args14[2] : {};

                if (!(options && (!options.from || !amount || !token))) {
                  _context14.next = 3;
                  break;
                }

                throw new Error('Missing Parameters');

              case 3:
                _tokenContract = this._getERC20TokenContract(token, this._web3);
                withdrawTx = _tokenContract.methods.withdraw(amount);
                _context14.next = 7;
                return this._fillOptions(options, withdrawTx, this._web3);

              case 7:
                _options = _context14.sent;
                return _context14.abrupt("return", this._wrapWeb3Promise(withdrawTx.send(_options), options));

              case 9:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      function startWithdraw(_x29, _x30) {
        return _startWithdraw.apply(this, arguments);
      }

      return startWithdraw;
    }()
  }, {
    key: "startERC721Withdraw",
    value: function () {
      var _startERC721Withdraw = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee15(token, tokenId) {
        var options,
            _tokenContract,
            withdrawTx,
            _options,
            _args15 = arguments;

        return _regenerator.default.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                options = _args15.length > 2 && _args15[2] !== undefined ? _args15[2] : {};

                if (!(options && (!options.from || !tokenId || !token))) {
                  _context15.next = 3;
                  break;
                }

                throw new Error('Missing Parameters');

              case 3:
                _tokenContract = this._getERC721TokenContract(token, this._web3);
                withdrawTx = _tokenContract.methods.withdraw(tokenId);
                _context15.next = 7;
                return this._fillOptions(options, withdrawTx, this._web3);

              case 7:
                _options = _context15.sent;
                return _context15.abrupt("return", this._wrapWeb3Promise(withdrawTx.send(_options), options));

              case 9:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      function startERC721Withdraw(_x31, _x32) {
        return _startERC721Withdraw.apply(this, arguments);
      }

      return startERC721Withdraw;
    }()
  }, {
    key: "getTx",
    value: function () {
      var _getTx = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee16(txId) {
        var response;
        return _regenerator.default.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                if (!this._syncerUrl) {
                  _context16.next = 11;
                  break;
                }

                _context16.prev = 1;
                _context16.next = 4;
                return this._apiCall({
                  url: "".concat(this._syncerUrl, "/tx/").concat(txId)
                });

              case 4:
                response = _context16.sent;

                if (!(response && response.tx)) {
                  _context16.next = 7;
                  break;
                }

                return _context16.abrupt("return", response.tx);

              case 7:
                _context16.next = 11;
                break;

              case 9:
                _context16.prev = 9;
                _context16.t0 = _context16["catch"](1);

              case 11:
                return _context16.abrupt("return", this._web3.eth.getTransaction(txId));

              case 12:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16, this, [[1, 9]]);
      }));

      function getTx(_x33) {
        return _getTx.apply(this, arguments);
      }

      return getTx;
    }()
  }, {
    key: "getReceipt",
    value: function () {
      var _getReceipt = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee17(txId) {
        var response;
        return _regenerator.default.wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                if (!this._syncerUrl) {
                  _context17.next = 11;
                  break;
                }

                _context17.prev = 1;
                _context17.next = 4;
                return this._apiCall({
                  url: "".concat(this._syncerUrl, "/tx/").concat(txId, "/receipt")
                });

              case 4:
                response = _context17.sent;

                if (!(response && response.receipt)) {
                  _context17.next = 7;
                  break;
                }

                return _context17.abrupt("return", response.receipt);

              case 7:
                _context17.next = 11;
                break;

              case 9:
                _context17.prev = 9;
                _context17.t0 = _context17["catch"](1);

              case 11:
                return _context17.abrupt("return", this._web3.eth.getTransactionReceipt(txId));

              case 12:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17, this, [[1, 9]]);
      }));

      function getReceipt(_x34) {
        return _getReceipt.apply(this, arguments);
      }

      return getReceipt;
    }()
  }, {
    key: "getTxProof",
    value: function () {
      var _getTxProof = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee18(txId) {
        var _ref, txProof;

        return _regenerator.default.wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                _context18.next = 2;
                return this._apiCall({
                  url: "".concat(this._syncerUrl, "/tx/").concat(txId, "/proof")
                });

              case 2:
                _ref = _context18.sent;
                txProof = _ref.proof;
                return _context18.abrupt("return", txProof);

              case 5:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18, this);
      }));

      function getTxProof(_x35) {
        return _getTxProof.apply(this, arguments);
      }

      return getTxProof;
    }()
  }, {
    key: "verifyTxProof",
    value: function verifyTxProof(txProof) {
      return (0, _proofs.verifyTxProof)(txProof);
    }
  }, {
    key: "getReceiptProof",
    value: function () {
      var _getReceiptProof = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee19(txId) {
        var _ref2, receiptProof;

        return _regenerator.default.wrap(function _callee19$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                _context19.next = 2;
                return this._apiCall({
                  url: "".concat(this._syncerUrl, "/tx/").concat(txId, "/receipt/proof")
                });

              case 2:
                _ref2 = _context19.sent;
                receiptProof = _ref2.proof;
                return _context19.abrupt("return", receiptProof);

              case 5:
              case "end":
                return _context19.stop();
            }
          }
        }, _callee19, this);
      }));

      function getReceiptProof(_x36) {
        return _getReceiptProof.apply(this, arguments);
      }

      return getReceiptProof;
    }()
  }, {
    key: "verifyReceiptProof",
    value: function verifyReceiptProof(receiptProof) {
      return (0, _proofs.verifyReceiptProof)(receiptProof);
    }
  }, {
    key: "getHeaderObject",
    value: function getHeaderObject(blockNumber) {
      return this._apiCall({
        url: "".concat(this._watcherUrl, "/header/included/").concat(blockNumber)
      });
    }
  }, {
    key: "getHeaderProof",
    value: function () {
      var _getHeaderProof = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee20(blockNumber, header) {
        var _ref3, headerProof;

        return _regenerator.default.wrap(function _callee20$(_context20) {
          while (1) {
            switch (_context20.prev = _context20.next) {
              case 0:
                _context20.next = 2;
                return this._apiCall({
                  url: "".concat(this._syncerUrl, "/block/").concat(blockNumber, "/proof"),
                  query: {
                    start: +header.start,
                    end: +header.end
                  }
                });

              case 2:
                _ref3 = _context20.sent;
                headerProof = _ref3.proof;
                return _context20.abrupt("return", headerProof);

              case 5:
              case "end":
                return _context20.stop();
            }
          }
        }, _callee20, this);
      }));

      function getHeaderProof(_x37, _x38) {
        return _getHeaderProof.apply(this, arguments);
      }

      return getHeaderProof;
    }()
  }, {
    key: "verifyHeaderProof",
    value: function verifyHeaderProof(headerProof) {
      return (0, _proofs.verifyHeaderProof)(headerProof);
    }
  }, {
    key: "withdraw",
    value: function () {
      var _withdraw = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee21(txId) {
        var options,
            _ref4,
            _ref5,
            txProof,
            receiptProof,
            header,
            headerProof,
            withdrawTx,
            _options,
            _args21 = arguments;

        return _regenerator.default.wrap(function _callee21$(_context21) {
          while (1) {
            switch (_context21.prev = _context21.next) {
              case 0:
                options = _args21.length > 1 && _args21[1] !== undefined ? _args21[1] : {};
                _context21.next = 3;
                return Promise.all([this.getTxProof(txId), this.getReceiptProof(txId)]);

              case 3:
                _ref4 = _context21.sent;
                _ref5 = (0, _slicedToArray2.default)(_ref4, 2);
                txProof = _ref5[0];
                receiptProof = _ref5[1];
                // fetch header object & header proof
                header = null;
                _context21.prev = 8;
                _context21.next = 11;
                return this.getHeaderObject(txProof.blockNumber);

              case 11:
                header = _context21.sent;
                _context21.next = 16;
                break;

              case 14:
                _context21.prev = 14;
                _context21.t0 = _context21["catch"](8);

              case 16:
                if (header) {
                  _context21.next = 18;
                  break;
                }

                throw new Error("No corresponding checkpoint/header block found for ".concat(txId, "."));

              case 18:
                _context21.next = 20;
                return this.getHeaderProof(txProof.blockNumber, header);

              case 20:
                headerProof = _context21.sent;
                withdrawTx = this._withdrawManagerContract.methods.withdrawBurntTokens(header.number, // header block
                _ethereumjsUtil.default.bufferToHex(Buffer.concat(headerProof.proof.map(function (p) {
                  return _ethereumjsUtil.default.toBuffer(p);
                }))), // header proof
                txProof.blockNumber, // block number
                txProof.blockTimestamp, // block timestamp
                txProof.root, // tx root
                receiptProof.root, // receipt root
                _ethereumjsUtil.default.bufferToHex(rlp.encode(receiptProof.path)), // key for trie (both tx and receipt)
                txProof.value, // tx bytes
                txProof.parentNodes, // tx proof nodes
                receiptProof.value, // receipt bytes
                receiptProof.parentNodes // reciept proof nodes
                );
                _context21.next = 24;
                return this._fillOptions(options, withdrawTx, this._parentWeb3);

              case 24:
                _options = _context21.sent;
                return _context21.abrupt("return", this._wrapWeb3Promise(withdrawTx.send(_options), options));

              case 26:
              case "end":
                return _context21.stop();
            }
          }
        }, _callee21, this, [[8, 14]]);
      }));

      function withdraw(_x39) {
        return _withdraw.apply(this, arguments);
      }

      return withdraw;
    }()
  }, {
    key: "processExits",
    value: function () {
      var _processExits = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee22(rootTokenAddress) {
        var options,
            processExits,
            _options,
            _args22 = arguments;

        return _regenerator.default.wrap(function _callee22$(_context22) {
          while (1) {
            switch (_context22.prev = _context22.next) {
              case 0:
                options = _args22.length > 1 && _args22[1] !== undefined ? _args22[1] : {};
                processExits = this._withdrawManagerContract.methods.processExits(rootTokenAddress);
                _context22.next = 4;
                return this._fillOptions(options, processExits, this._parentWeb3);

              case 4:
                _options = _context22.sent;
                return _context22.abrupt("return", this._wrapWeb3Promise(processExits.send(_options), options));

              case 6:
              case "end":
                return _context22.stop();
            }
          }
        }, _callee22, this);
      }));

      function processExits(_x40) {
        return _processExits.apply(this, arguments);
      }

      return processExits;
    }()
  }, {
    key: "withdrawLocally",
    value: function () {
      var _withdrawLocally = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee23(txId) {
        var options,
            withdrawTx,
            withdrawReceipt,
            withdrawBlock,
            withdrawObj,
            txProof,
            receiptProof,
            currentHeaderBlock,
            header,
            headerNumber,
            start,
            end,
            headers,
            tree,
            headerProof,
            withdrawTxObject,
            _options,
            _args23 = arguments;

        return _regenerator.default.wrap(function _callee23$(_context23) {
          while (1) {
            switch (_context23.prev = _context23.next) {
              case 0:
                options = _args23.length > 1 && _args23[1] !== undefined ? _args23[1] : {};
                _context23.next = 3;
                return this._web3.eth.getTransaction(txId);

              case 3:
                withdrawTx = _context23.sent;
                _context23.next = 6;
                return this._web3.eth.getTransactionReceipt(txId);

              case 6:
                withdrawReceipt = _context23.sent;
                _context23.next = 9;
                return this._web3.eth.getBlock(withdrawReceipt.blockNumber, true);

              case 9:
                withdrawBlock = _context23.sent;
                // draft withdraw obj
                withdrawObj = {
                  txId: txId,
                  block: withdrawBlock,
                  tx: withdrawTx,
                  receipt: withdrawReceipt
                };
                _context23.next = 13;
                return (0, _proofs.getTxProof)(withdrawObj.tx, withdrawObj.block);

              case 13:
                txProof = _context23.sent;
                _context23.next = 16;
                return (0, _proofs.getReceiptProof)(withdrawObj.receipt, withdrawObj.block, this._web3);

              case 16:
                receiptProof = _context23.sent;
                _context23.next = 19;
                return this._rootChainContract.methods.currentHeaderBlock().call();

              case 19:
                currentHeaderBlock = _context23.sent;
                _context23.next = 22;
                return this._rootChainContract.methods.headerBlock(parseInt(currentHeaderBlock, 10) - 1).call();

              case 22:
                header = _context23.sent;
                headerNumber = +currentHeaderBlock - 1;
                start = header.start;
                end = header.end;
                _context23.next = 28;
                return (0, _blocks.getHeaders)(start, end, this._web3);

              case 28:
                headers = _context23.sent;
                tree = new _merkleTree.default(headers);
                _context23.next = 32;
                return tree.getProof((0, _blocks.getBlockHeader)(withdrawObj.block));

              case 32:
                headerProof = _context23.sent;
                withdrawTxObject = this._withdrawManagerContract.methods.withdrawBurntTokens(headerNumber.toString(), // header block
                _ethereumjsUtil.default.bufferToHex(Buffer.concat(headerProof)), // header proof
                withdrawObj.block.number.toString(), // block number
                withdrawObj.block.timestamp.toString(), // block timestamp
                _ethereumjsUtil.default.bufferToHex(withdrawObj.block.transactionsRoot.toString()), // tx root
                _ethereumjsUtil.default.bufferToHex(withdrawObj.block.receiptsRoot.toString()), // tx root
                _ethereumjsUtil.default.bufferToHex(rlp.encode(receiptProof.path)), // key for trie (both tx and receipt)
                _ethereumjsUtil.default.bufferToHex((0, _proofs.getTxBytes)(withdrawObj.tx)), // tx bytes
                _ethereumjsUtil.default.bufferToHex(rlp.encode(txProof.parentNodes)), // tx proof nodes
                _ethereumjsUtil.default.bufferToHex((0, _proofs.getReceiptBytes)(withdrawObj.receipt)), // receipt bytes
                _ethereumjsUtil.default.bufferToHex(rlp.encode(receiptProof.parentNodes)) // reciept proof nodes
                );
                _context23.next = 36;
                return this._fillOptions(options, withdrawTxObject, this._parentWeb3);

              case 36:
                _options = _context23.sent;
                return _context23.abrupt("return", this._wrapWeb3Promise(withdrawTxObject.send(_options), options));

              case 38:
              case "end":
                return _context23.stop();
            }
          }
        }, _callee23, this);
      }));

      function withdrawLocally(_x41) {
        return _withdrawLocally.apply(this, arguments);
      }

      return withdrawLocally;
    }() //
    // Internal methods
    //

  }, {
    key: "_throwIfNull",
    value: function _throwIfNull(value, message) {
      if (!value) {
        throw new Error(message);
      }
    }
  }, {
    key: "_getERC20TokenContract",
    value: function _getERC20TokenContract(token, web3) {
      var _token = token.toLowerCase();

      var _tokenContract = this._tokenCache[_token];

      if (!_tokenContract) {
        _tokenContract = new web3.eth.Contract(_ChildERC.default.abi, _token); // update token cache

        this._tokenCache[_token] = _tokenContract;
      }

      return _tokenContract;
    }
  }, {
    key: "_getERC721TokenContract",
    value: function _getERC721TokenContract(token, web3) {
      var _token = token.toLowerCase();

      var _tokenContract = this._tokenCache[_token];

      if (!_tokenContract) {
        _tokenContract = new web3.eth.Contract(_ChildERC2.default.abi, _token); // update token cache

        this._tokenCache[_token] = _tokenContract;
      }

      return _tokenContract;
    }
  }, {
    key: "_fillOptions",
    value: function () {
      var _fillOptions2 = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee24(options, txObject, web3) {
        var from, _ref6, _ref7, gasLimit, gasPrice, nonce, chainId;

        return _regenerator.default.wrap(function _callee24$(_context24) {
          while (1) {
            switch (_context24.prev = _context24.next) {
              case 0:
                // delete chain id
                delete txObject.chainId;
                from = options.from || this.walletAddress;

                if (from) {
                  _context24.next = 4;
                  break;
                }

                throw new Error('`from` required in options or set wallet using maticObject.wallet = <private key>');

              case 4:
                _context24.next = 6;
                return Promise.all([!(options.gasLimit || options.gas) ? txObject.estimateGas({
                  from: from,
                  value: options.value
                }) : options.gasLimit || options.gas, // NOTE: Gas Price is set to '0', take care of type of gasPrice on  web3^1.0.0-beta.36
                !options.gasPrice ? web3.eth.getGasPrice() : options.gasPrice, !options.nonce ? web3.eth.getTransactionCount(from, 'pending') : options.nonce, !options.chainId ? web3.eth.net.getId() : options.chainId]);

              case 6:
                _ref6 = _context24.sent;
                _ref7 = (0, _slicedToArray2.default)(_ref6, 4);
                gasLimit = _ref7[0];
                gasPrice = _ref7[1];
                nonce = _ref7[2];
                chainId = _ref7[3];
                return _context24.abrupt("return", {
                  from: from,
                  gasLimit: gasLimit,
                  gas: gasLimit,
                  gasPrice: gasPrice,
                  nonce: nonce,
                  chainId: chainId,
                  value: options.value || 0,
                  to: options.to || null
                });

              case 13:
              case "end":
                return _context24.stop();
            }
          }
        }, _callee24, this);
      }));

      function _fillOptions(_x42, _x43, _x44) {
        return _fillOptions2.apply(this, arguments);
      }

      return _fillOptions;
    }()
  }, {
    key: "_wrapWeb3Promise",
    value: function _wrapWeb3Promise(promise, options) {
      var _emptyFunc = function _emptyFunc() {};

      return promise.on('transactionHash', options.onTransactionHash || _emptyFunc).on('receipt', options.onReceipt || _emptyFunc).on('error', options.onError || _emptyFunc);
    }
  }, {
    key: "_apiCall",
    value: function _apiCall() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var headers = data.headers || {};

      var queryParams = data.query && _queryString.default.stringify(data.query || {});

      var url = "".concat(data.url, "?").concat(queryParams || '');
      return fetch(url, {
        method: data.method || (data.body ? 'POST' : 'GET'),
        headers: _objectSpread({
          'Content-Type': 'application/json',
          Accept: 'application/json'
        }, headers),
        body: data.body ? JSON.stringify(data.body) : null
      }).then(function (res) {
        if (!res.ok) {
          var err = new Error(res.statusText || 'Unknown error occurred');
          err.response = res;
          throw err;
        }

        return res.json();
      });
    }
  }, {
    key: "web3",
    get: function get() {
      return this._web3;
    }
  }, {
    key: "parentWeb3",
    get: function get() {
      return this._parentWeb3;
    }
  }, {
    key: "wallet",
    get: function get() {
      if (this._parentWeb3.eth.accounts.wallet.length >= 1) {
        return this._parentWeb3.eth.accounts.wallet[0];
      }

      return null;
    },
    set: function set(_wallet) {
      this._web3.eth.accounts.wallet.add(_wallet);

      this._parentWeb3.eth.accounts.wallet.add(_wallet);
    }
  }, {
    key: "walletAddress",
    get: function get() {
      if (this.wallet) {
        return this.wallet.address;
      }

      return null;
    }
  }]);
  return Matic;
}();

exports.default = Matic;